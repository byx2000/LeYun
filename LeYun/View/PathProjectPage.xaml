<Page x:Class="LeYun.View.PathProjectPage"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity" 
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:viewmodel="clr-namespace:LeYun.ViewModel"
        xmlns:custom="clr-namespace:WPFCustomControls;assembly=WPFCustomControls"
        xmlns:model="clr-namespace:LeYun.Model"
        xmlns:local="clr-namespace:LeYun.View"
        mc:Ignorable="d"
        x:Name="page"
        d:DesignHeight="800" d:DesignWidth="1120">

    <Page.Resources>
        <Style TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource ScrollBarStyle}"/>
        <Style TargetType="{x:Type ContextMenu}" BasedOn="{StaticResource ContextMenuStyle}"/>
        <!--<viewmodel:NodeButtonMarginConverter x:Key="nodeButtonMarginConverter"/>
        <viewmodel:NodeButtonXConverter x:Key="nodeButtonXConverter"/>
        <viewmodel:NodeButtonYConverter x:Key="nodeButtonYConverter"/>
        <viewmodel:LineColorConverter x:Key="lineColorConverter"/>
        <viewmodel:NodeButtonColorConverter x:Key="nodeButtonColorConverter"/>-->
    </Page.Resources>

    <!--<Page.DataContext>
        <viewmodel:PathProjectPageViewModel />
    </Page.DataContext>-->

    <!--右边内容区-->
    <Grid Grid.Column="1">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="10*"/>
        </Grid.RowDefinitions>

        <!--计算操作区域-->
        <custom:FloatingCard Grid.Row="0"/>
        <Grid Grid.Row="0">
            <Border Grid.Row="0" Background="White" BorderBrush="#d6d7d9"/>
            <StackPanel Grid.Row="0" Orientation="Horizontal" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="15 15 0 15">
                <Popup  AllowsTransparency="True" FlowDirection="LeftToRight" PopupAnimation="Fade" Placement="Bottom" StaysOpen="False"
                    PlacementTarget="{Binding ElementName=save}"
                    Width="{Binding ElementName=save, Path=ActualWidth}"
                    IsOpen="{Binding IsSavePopupVisible, Mode=OneWay}">

                    <Border Background="White" BorderThickness="1 0 1 1" BorderBrush="#387cdf">
                        <Grid >
                            <Grid.RowDefinitions>
                                <RowDefinition />
                                <RowDefinition />
                                <RowDefinition />
                            </Grid.RowDefinitions>
                            <Button Grid.Row="0" Style="{StaticResource ButtonStyle}" Content="保存车辆" Margin="5 5 5 5" FontSize="12" Width="Auto" Height="25"
                                    Command="{Binding SaveCarCommand}"/>
                            <Button Grid.Row="1" Style="{StaticResource ButtonStyle}" Content="保存节点" Margin="5 0 5 5" FontSize="12" Width="Auto" Height="25"
                                    Command="{Binding SaveNodeCommand}"/>
                            <Button Grid.Row="2" Style="{StaticResource ButtonStyle}" Content="保存结果" Margin="5 0 5 5" FontSize="12" Width="Auto" Height="25"
                                    Command="{Binding SaveResultCommand}"/>
                        </Grid>
                    </Border>
                </Popup>
                <Button x:Name="save" Style="{StaticResource ButtonStyle}" Width="100" Height="30" Content="保存" Command="{Binding ShowSavePopupCommand}">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="MouseEnter">
                            <i:InvokeCommandAction Command="{Binding ShowSavePopupCommand}"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </Button>
                <Button Style="{StaticResource ButtonStyle}" Width="100" Height="30" Content="运行参数设置" Command="{Binding SetRunParamCommand}" Margin="10 0 0 0"/>
                <Button x:Name="setAlgoParam" Style="{StaticResource ButtonStyle}" Width="100" Height="30" Content="算法参数设置" Margin="10 0 0 0" 
                    CommandParameter="{Binding ElementName=ModeChoose, Path=SelectedIndex}"
                    Command="{Binding SetAlgoParamCommand}"/>
            </StackPanel>
            <StackPanel Grid.Row="0" Orientation="Horizontal" VerticalAlignment="Center" HorizontalAlignment="Right" Margin="0 15 15 15">

                <TextBlock Style="{StaticResource CenterAlignTextBlock}" Text="模式选择：" Foreground="Black"/>
                <ComboBox x:Name="ModeChoose" Style="{StaticResource ComboBoxStyle}" Width="120" Margin="0" 
                     FontSize="15" HorizontalContentAlignment="Left" VerticalContentAlignment="Center" Background="White" SelectedIndex="0">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="SelectionChanged">
                            <i:InvokeCommandAction 
                                Command="{Binding ModeChangeCommand}" 
                                CommandParameter="{Binding ElementName=ModeChoose, Path=SelectedIndex}"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                    <TextBlock  Text="时间优先"/>
                    <TextBlock  Text="车辆数优先"/>
                    <TextBlock  Text="自定义"/>
                </ComboBox>
                <Button x:Name="AddVehicleButton" Style="{StaticResource ButtonStyle}" Content="添加车辆" Width="80" Height="30" Margin="10 0 0 0" Command="{Binding ShowAddCarPopupCommand}">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="MouseEnter">
                            <i:InvokeCommandAction Command="{Binding ShowAddCarPopupCommand}"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </Button>
                <Popup  AllowsTransparency="True" FlowDirection="LeftToRight" PopupAnimation="Fade" Placement="Bottom" StaysOpen="False"
                    PlacementTarget="{Binding ElementName=AddVehicleButton}"
                    Width="{Binding ElementName=AddVehicleButton, Path=ActualWidth}"
                    IsOpen="{Binding IsAddCarPopupVisible, Mode=OneWay}">

                    <Border Background="White" BorderThickness="1 0 1 1" BorderBrush="#387cdf">
                        <Grid >
                            <Grid.RowDefinitions>
                                <RowDefinition />
                                <RowDefinition />
                            </Grid.RowDefinitions>
                            <Button Grid.Row="0" Style="{StaticResource ButtonStyle}" Content="手动输入" Margin="5 5 5 5" FontSize="12" Width="Auto" Height="25"
                            Command="{Binding AddCarCommand}"/>
                            <Button Grid.Row="1" Style="{StaticResource ButtonStyle}" Content="文件导入" Margin="5 0 5 5" FontSize="12" Width="Auto" Height="25"
                            Command="{Binding ImportCarsFromFileCommand}"/>
                        </Grid>
                    </Border>
                </Popup>
                <Button x:Name="AddPointButton" Style="{StaticResource ButtonStyle}" Content="添加结点" Width="80" Height="30" Margin="10 0 10 0" Command="{Binding ShowAddNodePopupCommand}">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="MouseEnter">
                            <i:InvokeCommandAction Command="{Binding ShowAddNodePopupCommand}"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </Button>
                <Popup  AllowsTransparency="True" FlowDirection="LeftToRight" PopupAnimation="Fade" Placement="Bottom" StaysOpen="False"
                    PlacementTarget="{Binding ElementName=AddPointButton}"
                    Width="{Binding ElementName=AddPointButton, Path=ActualWidth}"
                    IsOpen="{Binding IsAddNodePopupVisible, Mode=OneWay}">
                    <Border Background="White" BorderThickness="1 0 1 1" BorderBrush="#387cdf">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition />
                                <RowDefinition />
                            </Grid.RowDefinitions>
                            <Button Grid.Row="0" Style="{StaticResource ButtonStyle}" Content="手动输入" Margin="5 5 5 5" FontSize="12" Width="Auto" Height="25"
                            Command="{Binding AddNodeCommand}"/>
                            <Button Grid.Row="1" Style="{StaticResource ButtonStyle}" Content="文件导入" Margin="5 0 5 5" FontSize="12" Width="Auto" Height="25"
                            Command="{Binding ImportNodesFromFileCommand}"/>
                        </Grid>
                    </Border>
                </Popup>
                <Button x:Name="ClearButton" Style="{StaticResource ButtonStyle}" Content="清空" Width="80" Height="30" Margin="0 0 10 0" Command="{Binding ClearCommand}">
                    <Button.ContextMenu>
                        <ContextMenu x:Name="ClearMenu">
                            <MenuItem x:Name="ClearVehicleItem" Header="清空车辆"/>
                            <MenuItem x:Name="ClearNodesItem" Header="清空结点"/>
                        </ContextMenu>
                    </Button.ContextMenu>
                </Button>
                <Button x:Name="StartButton" Style="{StaticResource ButtonStyle}" Content="开始计算" Width="80" Height="30" Command="{Binding SolveCommand}"/>
            </StackPanel>
        </Grid>
        
        

        <!--计算显示区域-->
        <Grid Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="4*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>

            <custom:FloatingCard Margin="15 15 0 15"/>
            <!--背景图片-->
            <Image Grid.Column="0" Source="pack://application:,,,/Img/map.png" Stretch="Fill" Opacity="0.5" Margin="15 15 0 15"/>
            
            <!--线条画布-->
            <ItemsControl Name="myItemsControl" ItemsSource="{Binding Segments}" Margin="15 15 0 15">
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <Canvas/>
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <!--<Line X1="{Binding X1}" Y1="{Binding Y1}" X2="{Binding X2}" Y2="{Binding Y2}" Stroke="Black" StrokeThickness="2.5"/>-->
                        <Line Stroke="{Binding Stroke}" StrokeThickness="2">
                            <Line.X1>
                                <MultiBinding Converter="{StaticResource nodeButtonXConverter}">
                                    <Binding Path="ActualWidth" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=Canvas}"/>
                                    <Binding Path="X1"/>
                                </MultiBinding>
                            </Line.X1>
                            <Line.Y1>
                                <MultiBinding Converter="{StaticResource nodeButtonYConverter}">
                                    <Binding Path="ActualHeight" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=Canvas}"/>
                                    <Binding Path="Y1"/>
                                </MultiBinding>
                            </Line.Y1>
                            <Line.X2>
                                <MultiBinding Converter="{StaticResource nodeButtonXConverter}">
                                    <Binding Path="ActualWidth" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=Canvas}"/>
                                    <Binding Path="X2"/>
                                </MultiBinding>
                            </Line.X2>
                            <Line.Y2>
                                <MultiBinding Converter="{StaticResource nodeButtonYConverter}">
                                    <Binding Path="ActualHeight" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=Canvas}"/>
                                    <Binding Path="Y2"/>
                                </MultiBinding>
                            </Line.Y2>
                        </Line>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
                <ItemsControl.ItemContainerStyle>
                    <Style TargetType="ContentPresenter">
                        <Setter Property="Canvas.Left" Value="0"/>
                        <Setter Property="Canvas.Top" Value="0"/>
                    </Style>
                </ItemsControl.ItemContainerStyle>
            </ItemsControl>

            <!--节点画布-->
            <ItemsControl Grid.Column="0" x:Name="canvas" Background="Transparent" ItemsSource="{Binding Record.Nodes}" Margin="15 15 0 15">
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <Canvas ClipToBounds="True" Background="Transparent" viewmodel:MouseBehaviour.MouseDownCommand="{Binding MouseAddNodeCommand}"/>
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>

                <ItemsControl.ItemContainerStyle>
                    <Style TargetType="{x:Type ContentPresenter}">
                        <Setter Property="Canvas.Left">
                            <Setter.Value>
                                <MultiBinding Converter="{StaticResource nodeButtonXConverter}">
                                    <Binding Path="ActualWidth" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=Canvas}"/>
                                    <Binding Path="X"/>
                                </MultiBinding>
                            </Setter.Value>
                        </Setter>
                        <Setter Property="Canvas.Top">
                            <Setter.Value>
                                <MultiBinding Converter="{StaticResource nodeButtonYConverter}">
                                    <Binding Path="ActualHeight" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=Canvas}"/>
                                    <Binding Path="Y"/>
                                </MultiBinding>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </ItemsControl.ItemContainerStyle>

                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <Button x:Name="btn" Style="{StaticResource NodeButtonStyle}" 
                                Background="{Binding ID, Converter={StaticResource nodeButtonColorConverter}}"
                                Command="{Binding ElementName=page, Path=DataContext.EditNodeCommand}" 
                                CommandParameter="{Binding ID}">
                            <Button.Margin>
                                <MultiBinding Converter="{StaticResource nodeButtonMarginConverter}">
                                    <Binding ElementName="btn" Path="ActualWidth"/>
                                    <Binding ElementName="btn" Path="ActualHeight"/>
                                </MultiBinding>
                            </Button.Margin>
                        </Button>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>
            
            <!--车辆和配送点列表-->
            <Border Grid.Column="1" CornerRadius="0 0 10 0"/>
            <Grid Grid.Column="1">
                <Grid.RowDefinitions>
                    <RowDefinition Height="1*"/>
                    <RowDefinition Height="1*"/>
                </Grid.RowDefinitions>

                <!--配送点数据栏-->
                <custom:FloatingCard Grid.Row="0" Margin="15"/>
                <Grid Grid.Row="0" Margin="15">
                    <ListView x:Name="NodesList" Grid.Row="0" ItemContainerStyle="{StaticResource ListViewItemStyle}" ScrollViewer.CanContentScroll="False" BorderThickness="0" Margin="10"
                          ItemsSource="{Binding Record.Nodes}" SelectionMode="Single">
                        <ListView.ContextMenu>
                            <ContextMenu>
                                <MenuItem x:Name="AddNode" Header="添加" Command="{Binding AddNodeCommand}"/>
                                <MenuItem x:Name="EditNode" Header="编辑" 
                                      Command="{Binding EditNodeCommand}" 
                                      CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContextMenu}, Path=PlacementTarget.SelectedIndex}"/>
                                <MenuItem Header="删除"
                                          Command="{Binding RemoveNodeCommand}"
                                          CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContextMenu}, Path=PlacementTarget.SelectedIndex}"/>
                            </ContextMenu>
                        </ListView.ContextMenu>
                        <ListView.View>
                            <GridView ColumnHeaderContainerStyle="{StaticResource GridViewColumnHeaderStyle}">
                                <GridViewColumn Header="编号" Width="Auto" DisplayMemberBinding="{Binding ID}"/>
                                <GridViewColumn Header="x坐标" Width="Auto" DisplayMemberBinding="{Binding X, StringFormat={}{0:F2}}" />
                                <GridViewColumn Header="y坐标" Width="Auto" DisplayMemberBinding="{Binding Y, StringFormat={}{0:F2}}"/>
                                <GridViewColumn Header="需求量" Width="Auto" DisplayMemberBinding="{Binding Demand, StringFormat={}{0:F2}}"/>
                            </GridView>
                        </ListView.View>
                    </ListView>

                </Grid>
                <!--<DataGrid x:Name="NodesList" Grid.Row="0" Margin="10" Style="{StaticResource DataGridStyle}"
                          ItemsSource="{Binding Nodes}">
                    <DataGrid.Columns>
                        <DataGridTextColumn Header="节点编号" Width="*" Binding="{Binding ID}"/>
                        <DataGridTextColumn Header="X" Width="*" Binding="{Binding X}"/>
                        <DataGridTextColumn Header="Y" Width="*" Binding="{Binding Y}"/>
                        <DataGridTextColumn Header="需求量" Width="*" Binding="{Binding Demand}"/>
                    </DataGrid.Columns>
                </DataGrid>-->
                <!--车辆列表-->
                <custom:FloatingCard Grid.Row="1" Margin="15 0 15 15"/>
                <Grid Grid.Row="1" Margin="15 0 15 15">
                    <ListView x:Name="VehicleList" ItemContainerStyle="{StaticResource ListViewItemStyle}" Grid.Column="5" Grid.Row="2" ScrollViewer.CanContentScroll="False" BorderThickness="0" Margin="10"
                          ItemsSource="{Binding Record.Cars}" SelectionMode="Single">
                        <ListView.ContextMenu>
                            <ContextMenu>
                                <MenuItem x:Name="AddCar" Header="添加" Command="{Binding AddCarCommand}"/>
                                <MenuItem x:Name="EditCar" Header="编辑"
                                      Command="{Binding EditCarCommand}" 
                                      CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContextMenu}, Path=PlacementTarget.SelectedIndex}"/>
                                <MenuItem Header="删除"
                                          Command="{Binding RemoveCarCommand}"
                                          CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContextMenu}, Path=PlacementTarget.SelectedIndex}"/>
                            </ContextMenu>
                        </ListView.ContextMenu>
                        <ListView.View>
                            <GridView ColumnHeaderContainerStyle="{StaticResource GridViewColumnHeaderStyle}">
                                <GridViewColumn Header="编号" Width="Auto"  DisplayMemberBinding="{Binding ID}"/>
                                <GridViewColumn Header="最大载重" Width="Auto" DisplayMemberBinding="{Binding WeightLimit, StringFormat={}{0:F2}}" />
                                <GridViewColumn Header="最大里程" Width="Auto" DisplayMemberBinding="{Binding DisLimit, StringFormat={}{0:F2}}"/>
                            </GridView>
                        </ListView.View>
                    </ListView>

                </Grid>
            </Grid>
        </Grid>
    </Grid>
</Page>
